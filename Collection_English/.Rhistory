runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
View(solutions_test)
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
library(shiny)
library(shinyWidgets)
library(dplyr)
library(leaflet)
library(leaflet.extras)
hospitals <- read.csv("C:/Users/andre/OneDrive - UOM/Data/EVO_2021/treatment_centers.csv")
solutions_test <- read.csv("C:/Users/andre/OneDrive - UOM/Data/EVO_2021/solutions_folium_test.csv")
icon.glyphicon <- makeAwesomeIcon(icon= 'flag', markerColor = 'blue', iconColor = 'black')
icon.fa <- makeAwesomeIcon(icon = 'flag', markerColor = 'red', library='fa', iconColor = 'black')
icon.ion <- makeAwesomeIcon(icon = 'home', markerColor = 'green', library='ion')
server <- function(input, output, session) {
output$map <- renderLeaflet({
x <- solutions_test[solutions_test$誰..solutions %in% input$solutions,]
recessIcons <- awesomeIconList(
"Manufacturing" = makeAwesomeIcon(icon = "child", library = "fa",
markerColor = "blue"),
"Cryopreservation" = makeAwesomeIcon(icon = "exclamation", library = "fa",
markerColor = "red")
)
leaflet() %>%
addProviderTiles("Esri.NatGeoWorldMap", options =providerTileOptions(noWrap = TRUE)) %>%
#  fitBounds(~min(londd), ~min(latdd), ~max(londd), ~max(latdd)) %>%
addFullscreenControl() %>%
setView(lat = 39.742, lng = -104.835, zoom = 5) %>%
addAwesomeMarkers(data = hospitals, lng = hospitals$Longitude, lat = hospitals$Latitude, popup = hospitals$Name,
icon = icon.glyphicon) %>%
addAwesomeMarkers(data = x, lng = x$Longitude_Manu, lat = x$Latitude_manu, icon = recessIcons[x$Type])
})
# update animation interval
animation <- reactiveValues(speed = 100, value = 1)
observeEvent(input$speed, {
invalidateLater(500, session)
animation$value <- input$slider
animation$speed <- input$speed
})
output$displaySpeed <- renderText({
HTML("Current interval:", animation$speed)
})
observeEvent(input$speed, {
session$sendCustomMessage('resume', TRUE)
})
observeEvent(input$min | input$max, {
animation$value <- input$slider
})
}
ui <- bootstrapPage(
tags$head(singleton(tags$script(src = 'shiny-events.js'))),
absolutePanel(
top = 10,
right = 10,
sliderInput("speed", "Animation Speed", value = 100, ticks = FALSE, round = 50, min = 50, max = 1000),
sliderInput(inputId = "solutions", label = "Solutions",
min = min(solutions_test$誰..solutions),
max = max(solutions_test$誰..solutions),
value = min(solutions_test$誰..solutions), step = 1,
animate = animationOptions(interval = animation$speed, loop = TRUE)),
),
leafletOutput("map", width = "80%", height = 1000)
)
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
#### Load necessary packages
library(shiny)
library(networkD3)
#### Server ####
server <- function(input, output) {
p <- eventReactive(input$plot_network,
{
## re-write the mouseover and mouseout functions and override them with
## htmlwidgets::onRender
customJS <- '
function(el,x) {
var link = d3.selectAll(".link")
var node = d3.selectAll(".node")
var options = { opacity: 1,
clickTextSize: 10,
opacityNoHover: 0.1,
radiusCalculation: "Math.sqrt(d.nodesize)+6"
}
var unfocusDivisor = 4;
var links = HTMLWidgets.dataframeToD3(x.links);
var linkedByIndex = {};
links.forEach(function(d) {
linkedByIndex[d.source + "," + d.target] = 1;
linkedByIndex[d.target + "," + d.source] = 1;
});
function neighboring(a, b) {
return linkedByIndex[a.index + "," + b.index];
}
function nodeSize(d) {
if(options.nodesize){
return eval(options.radiusCalculation);
}else{
return 6}
}
function mouseover(d) {
var unfocusDivisor = 4;
link.transition().duration(200)
.style("opacity", function(l) { return d != l.source && d != l.target ? +options.opacity / unfocusDivisor : +options.opacity });
node.transition().duration(200)
.style("opacity", function(o) { return d.index == o.index || neighboring(d, o) ? +options.opacity : +options.opacity / unfocusDivisor; });
d3.select(this).select("circle").transition()
.duration(750)
.attr("r", function(d){return nodeSize(d)+5;});
node.select("text").transition()
.duration(750)
.attr("x", 13)
.style("stroke-width", ".5px")
.style("font", 24 + "px ")
.style("opacity", function(o) { return d.index == o.index || neighboring(d, o) ? 1 : 0; });
}
function mouseout() {
node.style("opacity", +options.opacity);
link.style("opacity", +options.opacity);
d3.select(this).select("circle").transition()
.duration(750)
.attr("r", function(d){return nodeSize(d);});
node.select("text").transition()
.duration(1250)
.attr("x", 0)
.style("font", options.fontSize + "px ")
.style("opacity", 0);
}
d3.selectAll(".node").on("mouseover", mouseover).on("mouseout", mouseout);
}
'
MisLinks <- as.data.frame(readxl::read_xlsx(input$edge_file$datapath,
col_names = TRUE,
sheet = 1))
MisNodes <- as.data.frame(readxl::read_xlsx(input$node_file$datapath,
col_names = TRUE,
sheet = 1))
fn <- forceNetwork(
Links = MisLinks,
Nodes = MisNodes,
Source = "source",
Target = "target",
Value = "value",
NodeID = "name",
Group = "group",
linkDistance = 100,
linkColour = '#999999',
charge = -50,
legend = T,
zoom = T,
fontSize = 15,
fontFamily = "sans",
opacity = 1,
opacityNoHover = 0
)
htmlwidgets::onRender(fn, customJS)
})
output$force <- renderForceNetwork({
p()
})
}
#### UI ####
ui <- shinyUI(fluidPage(
titlePanel("Shiny: networkD3"),
sidebarLayout(
sidebarPanel(
## Upload edge table file in .xlsx format
fileInput(
"edge_file",
"Upload MisLinks.xlsx",
multiple = FALSE,
accept = c(".xlsx")
),
## Upload node attribute table file in .xlsx format
fileInput(
"node_file",
"Upload MisNodes.xlsx",
multiple = FALSE,
accept = c(".xlsx")
),
# Display plot
actionButton("plot_network", "display plot")
),
mainPanel(
tabsetPanel(
tabPanel("Force directed layout", forceNetworkOutput("force"))
)
)
)
))
#### Run ####
shinyApp(ui = ui, server = server)
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
# Create our own custom icons
icon_list <- iconList(
"Manufacturing" = makeIcon("manu_icon.png", iconWidth = 24, iconHeight = 30),
"Cryopreservation" = makeIcon("cryo_icon.png", iconWidth = 24, iconHeight = 30))
greenLeafIcon <- makeIcon(
iconUrl = "hospital_icon.png",
iconWidth = 38, iconHeight = 38,
iconAnchorX = 22, iconAnchorY = 22
)
solutions_test <- read.csv("C:/Users/andre/OneDrive - UOM/Data/EVO_2021/solutions_folium_test.csv")
hospitals <- read.csv("C:/Users/andre/OneDrive - UOM/Data/EVO_2021/treatment_centers.csv")
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
leaflet() %>%
addProviderTiles("Esri.DeLorme", options =providerTileOptions(noWrap = TRUE)) %>%
addMiniMap(
tiles = providers$Esri.DeLorme,
toggleDisplay = TRUE) %>%
addEasyButton(easyButton(
icon="fa-globe", title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }"))) %>%
addEasyButton(easyButton(
icon="fa-crosshairs", title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }"))) %>%
addMarkers(data=hospitals,
clusterOptions = markerClusterOptions(),
clusterId = "quakesCluster") %>%
addEasyButton(easyButton(
states = list(
easyButtonState(
stateName="unfrozen-markers",
icon="ion-toggle",
title="Freeze Clusters",
onClick = JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'quakesCluster');
clusterManager.freezeAtZoom();
btn.state('frozen-markers');
}")
),
easyButtonState(
stateName="frozen-markers",
icon="ion-toggle-filled",
title="UnFreeze Clusters",
onClick = JS("
function(btn, map) {
var clusterManager =
map.layerManager.getLayer('cluster', 'quakesCluster');
clusterManager.unfreeze();
btn.state('unfrozen-markers');
}")
)
)
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
runApp('C:/Users/andre/OneDrive - UOM/Code/Rshiny_Leaflet_EVO2021')
install.packages("colourpicker")
library("shiny")
library("shinyjs")
library("colourpicker")
ui <- shinyUI(pageWithSidebar(
titlePanel("", "3D Perspective Plot for Interaction Effects"),
sidebarPanel(
tabsetPanel(
tabPanel("Data",
sliderInput("b0", "Intercept:", min = -10, max = 10, value = 0, step = 0.5),
sliderInput("b1", "Beta 1 (x1):", min = -10, max = 10, value = 0, step = 0.5),
sliderInput("b2", "Beta 2 (x2):", min = -10, max = 10, value = 0, step = 0.5),
sliderInput("b3", "Beta 3 (x1*x2):", min = -10, max = 10, value = 0, step = 0.5),
sliderInput("nobs", "Number of Observations:", min = 10, max = 1000, value = 100, step = 10)
),
tabPanel("Model",
helpText("Select a model from those listed below"),
selectInput("modelformula", "Model Formula",
c("y ~ x1", "y ~ x2", "y ~ x1 * x2", "y ~ x1 + x1:x2", "y ~ x2 + x1:x2", "y ~ x1:x2"),
selected = "y ~ x1 * x2", multiple = FALSE, selectize = TRUE)
),
tabPanel("View",
sliderInput("theta", "View azimuthal direction (theta):",
min = 0, max = 360, value = 45, step = 15),
sliderInput("phi", "View colatitude (phi):",
min = 0, max = 360, value = 15, step = 15),
sliderInput("distance", "View distance (d):",
min = 0, max = 1, value = 1, step = 0.05)
),
tabPanel("Surface",
sliderInput("density", "Grid Density:",
min = 2, max = 50, value = 10, step = 1),
colourInput("color", "Surface color:", value = "gray", allowTransparent = FALSE),
colourInput("border", "Border color:", value = "black", allowTransparent = FALSE),
sliderInput("shade", "Shade:", min = 0, max = 1, value = 0.75, step = 0.05),
sliderInput("ltheta", "Illumination azimuthal direction l(theta):",
min = 0, max = 360, value = 20, step = 10),
sliderInput("lphi", "Illumination colatitude (lphi):",
min = 0, max = 360, value = 20, step = 10)
),
tabPanel("Axes",
checkboxInput("box", "Bounding box?", value = TRUE),
checkboxInput("axes", "Axis Ticks?", value = TRUE),
selectInput("ticktype", "Tick type", c("simple", "detailed"),
selected = "simple", multiple = FALSE, selectize = TRUE),
sliderInput("nticks", "Number of ticks:", min = 2, max = 50, value = 6, step = 2),
textInput("xlab", "x1 axis label:", value = "x1"),
textInput("ylab", "x2 axis label:", value = "x2"),
textInput("zlab", "Vertical axis label:", value = "y")
),
tabPanel("Marginal Effects",
selectInput("me_x2", "Marginal Effect of X1 at X2 = ", c(NA, as.character(seq(0, 1, by = 0.1))),
multiple = FALSE, selectize = TRUE),
colourInput("me_x2_color", "Line Color:", value = "red", allowTransparent = FALSE),
selectInput("me_x1", "Marginal Effect of X2 at X1 = ", c(NA, as.character(seq(0, 1, by = 0.1))),
multiple = FALSE, selectize = TRUE),
colourInput("me_x1_color", "Line Color:", value = "red", allowTransparent = FALSE)
)
)#,
#downloadButton("downloadImage", label = "Download Plot (.png)")
),
mainPanel(
headerPanel("Plot of Interaction Effects"),
tabsetPanel(
tabPanel("Perspective Plot", plotOutput("plot1"))
)
)
))
server <- function(input, output) {
output$plot1 <- renderPlot({
set.seed(1)
x1 <- runif(input$nobs, 0, 1)
x2 <- runif(input$nobs, 0, 1)
y <- input$b0 +
(input$b1 * x1) +
(input$b2 * x2) +
(input$b3 * x1 * x2) + rnorm(input$nobs)
m <- lm(as.formula(input$modelformula))
nx <- seq(0, 1, length.out = input$density)
z <- outer(nx, nx, FUN = function(a, b) predict(m, data.frame(x1 = a, x2 = b)))
par(mar = rep(1, 4))
p <- persp(nx, nx, z,
xlab = input$xlab, ylab = input$ylab, zlab = input$zlab,
r = input$distance,
theta = input$theta, phi = input$phi, shade = input$shade,
col = input$color, border = input$border,
ltheta = input$ltheta, lphi = input$lphi,
box = input$box, axes = input$axes,
ticktype = input$ticktype, nticks = input$nticks)
if (!is.na(input$me_x1)) {
lines(trans3d(x = rep(as.numeric(input$me_x1), 2), y = c(0,1),
z = predict(m, data.frame(x1 = rep(as.numeric(input$me_x1), 2), x2 = c(0,1))),
pmat = p),
col = input$me_x1_color, lwd = 2)
}
if (!is.na(input$me_x2)) {
lines(trans3d(x = c(0,1), y = rep(as.numeric(input$me_x2), 2),
z = predict(m, data.frame(x1 = c(0,1), x2 = rep(as.numeric(input$me_x2), 2))),
pmat = p),
col = input$me_x2_color, lwd = 2)
}
})
output$downloadImage <- downloadHandler(
filename = "perspective.png",
content = function(file) {
png(file)
plotInput()
dev.off()
},
contentType = "image/png"
)
}
shinyApp(ui, server)
shiny::runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English')
shiny::runApp('C:/Users/andre/OneDrive - UOM/Code/EVO_2021/Rshiny_Leaflet_EVO2021')
shiny::runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
shiny::runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
library(shiny)
library(DT)
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp()
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
shiny::runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp()
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Algorithms/Algorithms')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/Desktop/app_1.R')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
shiny::runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_0.2_BA.r')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_0.2_BA.r')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_revised .R')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_0.2_BA.r')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_0.2_BA.r')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_english.r')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_Spanish')
library(shiny); runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
runApp('C:/Users/andre/OneDrive - UOM/IPoW/Collection_English/app_1.R')
setwd("C:/Users/andre/OneDrive - UOM/IPoW/Collection_English")
setwd("C:/Users/andre/OneDrive - UOM/IPoW/Collection_English")
runApp()
